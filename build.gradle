plugins {
	// https://fabricmc.net/wiki/documentation:fabric_loom
	id 'fabric-loom' version '1.4-SNAPSHOT'
	// https://plugins.gradle.org/plugin/io.github.juuxel.loom-vineflower
	//id 'io.github.juuxel.loom-vineflower' version '1.11.0'
	id 'maven-publish'
	id 'idea'
}

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
Boolean appendBuildNumber = System.getenv("APPEND_BUILD_NUMBER") == "true" && buildNumber != null
String modVersion = System.getenv("MOD_VERSION") ?: "0.0.1"

group = project.maven_group
version = modVersion +
		(appendBuildNumber ? "-build${buildNumber}" : "") +
		"+${project.minecraft_version}"

base {
	archivesName = "${project.archives_base_name}-fabric"
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"expandedenderchest" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// https://github.com/SpongePowered/Mixin/wiki/Mixin-Java-System-Properties
	def applyCommonRunConfig = { run ->
		// run.runDir = "run/${project.minecraft_version}/${run.name}"
		// run.vmArg('-XX:+ShowCodeDetailsInExceptionMessages')
		run.property("mixin.debug.export", "true")
		run.property("mixin.debug.export.decompile", "true")
		run.property("mixin.dumpTargetOnFailure", "true")
		run.property("mixin.debug.verify", "true")
		run.property("mixin.debug.verbose", "true")
		run.property("mixin.env.remapRefMap", "true")
		run.property("mixin.checks", "true")
		run.property("mixin.hotSwap", "true")
	}

	runs {
		client {
			runDir = "run/${project.minecraft_version}/client"
			vmArg "-XX:+ShowCodeDetailsInExceptionMessages"
			applyCommonRunConfig(client)
		}
		server {
			runDir = "run/${project.minecraft_version}/server"
			vmArg "-XX:+ShowCodeDetailsInExceptionMessages"
			applyCommonRunConfig(server)
		}
	}
}

repositories {
	mavenCentral()
	maven { url = "https://maven.fabricmc.net/" } // Fabric
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu

	// https://docs.modrinth.com/docs/tutorials/maven/#advanced-repository-declaration-recommended
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		name = "CurseForge"
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mods that are useful for local development
	devMods(dependencies)
}

// mods that can be uncommented to test in development
static def devMods(DependencyHandler deps) {
	deps.modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
	// There is no 1.20.3 compatible version yet deps.modLocalRuntime("maven.modrinth:lithium:mc1.20.2-0.12.0")
	deps.modLocalRuntime("maven.modrinth:sodium:mc1.20.3-0.5.5")
	deps.modLocalRuntime("maven.modrinth:starlight:1.1.3+1.20.3")
	deps.modLocalRuntime("maven.modrinth:auth-me:8.0.0+1.20.4")
}

processResources {
	Map<String, Object> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("mod_id", project.mod_id)
	properties.put("mod_name", project.mod_name)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("minecraft_version", project.minecraft_version)
	properties.put("java_version", sourceCompatibility)

	properties.each { k, v -> inputs.property(k, v) }

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release.set(17)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		//noinspection GroovyAssignabilityCheck
		mavenJava(MavenPublication) {
			//noinspection GroovyAssignabilityCheck
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
